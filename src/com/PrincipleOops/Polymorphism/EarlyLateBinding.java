package com.PrincipleOops.Polymorphism;

public class EarlyLateBinding {
    /*
    * binding means --> connecting a method call to its method body
    *ðŸ”´ 1. Early Binding (Static Binding)
        Based On Reference type
       âœ… Happens at: Compile Time
       âœ… java Uses early binding in : Method Overloading or calls to private, static, and final methods
       âœ… The method signatures are resolved during compilation,
           so this is early binding.

    *ðŸ”´ 2. Late Binding (Dynamic Binding)
         Based On Actual object type
         âœ… Happens at: Runtime
         âœ… Uses: Method Overriding (Polymorphism)
         âœ… Here, Java doesnâ€™t know at compile time which method to call â€” it depends on the object type at runtime
    * */

    public static void main(String[] args) {

        // ðŸ”´ 1. Early Binding (Static Binding)
        Calculator calc = new  Calculator();
        calc.add(5 , 7);  // Compiler binds to add(int, int)
        calc.add(2 , 6 , 9);  // Compiler binds to add(int, int , int)

        // ðŸ”´ 2. Late Binding (Static Binding)
        Animal obj  = new Dog();  // Upcasting
        obj.sound(); // Runtime decides to call Dog's version â†’ Late Binding
    }
}

// ðŸ”´  Early Binding (Static Binding)
class  Calculator{
    void add(int a , int b){
        System.out.println("Sum :" + (a +b));
    }
    void add(int a , int b , int c){
        System.out.println("Sum :" + (a + b + c));
    }
}

// ðŸ”´ Late  Binding (dynamic  Binding)

class Animal {
  void sound(){
      System.out.println("Animals sounds");
  }
}
class Dog extends Animal{
    @Override
    void sound(){
        System.out.println("Bark !! ");
    }
}